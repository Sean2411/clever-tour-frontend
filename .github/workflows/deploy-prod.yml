name: Deploy to Production

on:
  push:
    branches: [ production ]
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: 'Type "deploy" to confirm production deployment'
        required: true
        default: ''

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: clever-tour-frontend-prod
  API_URL: https://api.clever-tour.com
  REPOSITORY: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/clever-tour-frontend

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate manual deployment
      if: github.event_name == 'workflow_dispatch'
      run: |
        if [ "${{ github.event.inputs.confirm_deployment }}" != "deploy" ]; then
          echo "❌ Deployment cancelled. You must type 'deploy' to confirm."
          exit 1
        fi
        echo "✅ Production deployment confirmed"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm run lint

    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_API_URL: ${{ env.API_URL }}
        NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.PROD_STRIPE_PUBLISHABLE_KEY }}

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker
      run: gcloud auth configure-docker us-central1-docker.pkg.dev

    - name: Build and push Docker image
      run: |
        docker build -t $REPOSITORY/$SERVICE_NAME:$GITHUB_SHA .
        docker push $REPOSITORY/$SERVICE_NAME:$GITHUB_SHA

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image $REPOSITORY/$SERVICE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --port 3000 \
          --memory 2Gi \
          --cpu 2 \
          --max-instances 20 \
          --set-env-vars NEXT_PUBLIC_API_URL=$API_URL,NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.PROD_STRIPE_PUBLISHABLE_KEY }}

    - name: Install gcloud beta components
      run: gcloud components install beta --quiet

    - name: Map custom domain
      run: |
        # 检查域名映射是否已存在
        if gcloud beta run domain-mappings describe --domain=clever-tour.com --region=$REGION --quiet 2>/dev/null; then
          echo "Domain mapping already exists, no update needed"
        else
          echo "Creating new domain mapping..."
          gcloud beta run domain-mappings create \
            --service $SERVICE_NAME \
            --domain clever-tour.com \
            --region $REGION
        fi

    - name: Get service URL
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
        echo "Service deployed at: $SERVICE_URL"
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

    - name: Create GitHub Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/production'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Production Release v${{ github.run_number }}
        body: |
          🚀 **Production Deployment**
          
          **Status:** ✅ Successfully deployed
          **Environment:** Production
          **URL:** ${{ env.SERVICE_URL }}
          **API:** ${{ env.API_URL }}
          **Commit:** \`${{ github.sha }}\`
          **Triggered by:** ${{ github.actor }}
          
          The application has been deployed to the production environment.
        draft: false
        prerelease: false

    - name: Comment deployment URL
      if: github.event_name == 'push' && github.event.pull_request
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('🚀 Production Deployment')
          );
          
          const body = `🚀 **Production Deployment**
          
          **Status:** ✅ Successfully deployed
          **Environment:** Production
          **Custom Domain:** https://clever-tour.com
          **Service URL:** ${{ env.SERVICE_URL }}
          **API:** ${{ env.API_URL }}
          **Commit:** \`${{ github.sha }}\`
          **Triggered by:** ${{ github.actor }}
          
          The application has been deployed to the production environment and is accessible via the custom domain.`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: body
            });
          }
